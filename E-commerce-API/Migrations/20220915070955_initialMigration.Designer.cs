// <auto-generated />
using System;
using ECommerce.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220915070955_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Passwrod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ECommerce.API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5134),
                            Name = "Electronices",
                            Path = "category_Fuji_Dash_Electronics_1x._SY304_CB432774322_.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5177),
                            Name = "Computers",
                            Path = "category-Fuji_Dash_PC_1x._SY304_CB431800965_.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5181),
                            Name = "Games",
                            Path = "category-games_Fuji_Desktop_Dash_Kindle_1x._SY304_CB639752818_.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5184),
                            Name = "Pets",
                            Path = "category-pets_Fuji_Dash_Pets_1X._SY304_CB639746743_.jpg"
                        });
                });

            modelBuilder.Entity("ECommerce.API.Models.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "953b557b-b64b-454a-85fe-08a6c1604843",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "13f25408-2e3f-41db-9bbe-d8cae07da66c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("ECommerce.API.Models.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c086036e-ad2d-496c-bc3f-e38e82cd4693",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5489),
                            Email = "appuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "laksjdflaksj",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "appuser@gmail.com"
                        },
                        new
                        {
                            Id = 101,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae7e331b-e1bc-4813-9c56-17e8f0db8fb0",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5527),
                            Email = "appuser2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "laksjdflaksj",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "appuser2@gmail.com"
                        },
                        new
                        {
                            Id = 102,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5aa58857-53f3-44c6-89c8-d2c1d17c420b",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5548),
                            Email = "appuser3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "laksjdflaksj",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "appuser3@gmail.com"
                        },
                        new
                        {
                            Id = 103,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62bab313-5534-423d-b7f9-700cc3343d17",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5739),
                            Email = "appuser4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "laksjdflaksj",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "appuser4@gmail.com"
                        },
                        new
                        {
                            Id = 104,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc22b189-e37e-4de2-bfd9-ce70566e4f0e",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5763),
                            Email = "appuser5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "laksjdflaksj",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "appuse54@gmail.com"
                        });
                });

            modelBuilder.Entity("ECommerce.API.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ECommerce.API.Models.InvoiceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoicesDetails");
                });

            modelBuilder.Entity("ECommerce.API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5312),
                            IsBestSeller = true,
                            Name = "Laptop",
                            Path = "electronics-laptop_71rXSVqET9L._AC_UL320_.jpg",
                            Price = 200m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5321),
                            IsBestSeller = true,
                            Name = "Mobile",
                            Path = "electronics-mobile_81AeiqxHkwL._AC_UL320_.jpg",
                            Price = 100m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5325),
                            IsBestSeller = true,
                            Name = "Printer",
                            Path = "electronics-printer_61UdeL7aO-L._AC_UL320_.jpg",
                            Price = 400m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5328),
                            IsBestSeller = true,
                            Name = "EarPods",
                            Path = "electronices-headphones_7120GgUKj3L._AC_UL320_.jpg",
                            Price = 15m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5332),
                            IsBestSeller = true,
                            Name = "Batteries",
                            Path = "electronics-batteries_81ZnAYiX5sL._AC_UL320_.jpg",
                            Price = 5m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5335),
                            IsBestSeller = true,
                            Name = "Pen",
                            Path = "electronics-pen_21SPDoiRuGL._AC_UL320_.jpg",
                            Price = 250m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5339),
                            IsBestSeller = false,
                            Name = "Usb",
                            Path = "electronics-usb_71wrIZujPIL._AC_UL320_.jpg",
                            Price = 25m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5342),
                            IsBestSeller = true,
                            Name = "Player",
                            Path = "computers-player_71E4InwfcPL._AC_UL320_.jpg",
                            Price = 350m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5345),
                            IsBestSeller = true,
                            Name = "Computer",
                            Path = "games-controller_61X3uV04ztL._AC_UL320_.jpg",
                            Price = 25m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5349),
                            IsBestSeller = false,
                            Name = "Computer",
                            Path = "games-vr_61tE7IcuLmL._AC_UL320_.jpg",
                            Price = 90m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5352),
                            IsBestSeller = true,
                            Name = "Computer",
                            Path = "games-xbox_61JGKhqxHxL._AC_UL320_.jpg",
                            Price = 150m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5356),
                            IsBestSeller = false,
                            Name = "Cat",
                            Path = "pets-cat_61ng2AAFZRL._AC_UL320_.jpg",
                            Price = 400m
                        });
                });

            modelBuilder.Entity("ECommerce.API.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Rating")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 100,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(5997),
                            ProductId = 1,
                            Rating = 4m
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 101,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6004),
                            ProductId = 1,
                            Rating = 5m
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 102,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6008),
                            ProductId = 1,
                            Rating = 1m
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 104,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6013),
                            ProductId = 1,
                            Rating = 5m
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 104,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6016),
                            ProductId = 2,
                            Rating = 2m
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 103,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6020),
                            ProductId = 2,
                            Rating = 3m
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 104,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6023),
                            ProductId = 2,
                            Rating = 5m
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 104,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6027),
                            ProductId = 3,
                            Rating = 1m
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 102,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6030),
                            ProductId = 4,
                            Rating = 4m
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 102,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6033),
                            ProductId = 4,
                            Rating = 3m
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 104,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6036),
                            ProductId = 5,
                            Rating = 5m
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 104,
                            Body = "Well Done!",
                            CreatedAt = new DateTime(2022, 9, 15, 10, 9, 54, 928, DateTimeKind.Local).AddTicks(6040),
                            ProductId = 6,
                            Rating = 5m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.HasOne("ECommerce.API.Models.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.API.Models.Invoice", b =>
                {
                    b.HasOne("ECommerce.API.Models.Identity.AppUser", "AppUser")
                        .WithMany("Invoices")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ECommerce.API.Models.InvoiceDetails", b =>
                {
                    b.HasOne("Customer", null)
                        .WithMany("InovicesDetails")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ECommerce.API.Models.Invoice", null)
                        .WithMany("InvoicesDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.API.Models.Product", "Product")
                        .WithMany("InvoicesDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.API.Models.Product", b =>
                {
                    b.HasOne("ECommerce.API.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerce.API.Models.Review", b =>
                {
                    b.HasOne("ECommerce.API.Models.Identity.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customer", null)
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ECommerce.API.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ECommerce.API.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ECommerce.API.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ECommerce.API.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ECommerce.API.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.API.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ECommerce.API.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Navigation("InovicesDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ECommerce.API.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerce.API.Models.Identity.AppUser", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ECommerce.API.Models.Invoice", b =>
                {
                    b.Navigation("InvoicesDetails");
                });

            modelBuilder.Entity("ECommerce.API.Models.Product", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("InvoicesDetails");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
